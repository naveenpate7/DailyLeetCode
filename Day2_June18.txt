Divide Array Into Arrays With Max Difference
Solved
Medium
Topics
premium lock icon
Companies
Hint
You are given an integer array nums of size n where n is a multiple of 3 and a positive integer k.

Divide the array nums into n / 3 arrays of size 3 satisfying the following condition:

The difference between any two elements in one array is less than or equal to k.
Return a 2D array containing the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.

 

Example 1:

Input: nums = [1,3,4,8,7,9,3,5,1], k = 2

Output: [[1,1,3],[3,4,5],[7,8,9]]

Explanation:

The difference between any two elements in each array is less than or equal to 2.

Example 2:

Input: nums = [2,4,2,2,5,2], k = 2

Output: []

Explanation:

Different ways to divide nums into 2 arrays of size 3 are:

[[2,2,2],[2,4,5]] (and its permutations)
[[2,2,4],[2,2,5]] (and its permutations)
Because there are four 2s there will be an array with the elements 2 and 5 no matter how we divide it. since 5 - 2 = 3 > k, the condition is not satisfied and so there is no valid division.

Example 3:

Input: nums = [4,2,9,8,2,12,7,12,10,5,8,5,5,7,9,2,5,11], k = 14

Output: [[2,2,12],[4,8,5],[5,9,7],[7,8,5],[5,9,10],[11,12,2]]

Explanation:

The difference between any two elements in each array is less than or equal to 14.




code : 



class Solution {
public:
    vector<vector<int>> divideArray(vector<int>& nums, int k) {
        // int n = nums.size();
        // if (n % 3 != 0) return {};

        // // ‚úÖ YOUR logic structure preserved
        // sort(nums.begin(), nums.end()); // üõ†Ô∏è Minimal change to enable valid grouping

        // int groupCount = n / 3;
        // vector<vector<int>> res;
        // vector<int> vis(n, 0);

        // int start = 0;
        // int end = 0;

        // while (start < groupCount) {
        //     vector<int> group;
        //     for (int i = 0; i < nums.size(); i++) {
        //         if (vis[i]) continue;
        //         if (group.empty()) {
        //             group.push_back(nums[i]);
        //             vis[i] = 1;
        //         } else if (group.size() < 3 && abs(group[0] - nums[i]) <= k) {
        //             group.push_back(nums[i]);
        //             vis[i] = 1;
        //         }
        //         if (group.size() == 3) break;
        //     }

        //     if (group.size() != 3) return {}; // ‚ùå Invalid group
        //     res.push_back(group);
        //     start++;
        // }
        // return res;
        int n=nums.size();
        n=n/3;
        vector<vector<int>>res;
        sort(nums.begin(),nums.end());
        int start=0;
        while(start < nums.size()){
            vector<int>dummy;
            if (abs(nums[start] - nums[start + 2]) <= k) {
                for(int i=start;i<=start+2;i++){
                    dummy.push_back(nums[i]);
                }
            }else return {};
            res.push_back(dummy);
            start=start+3;
        }
        return res;
    }
};






second question : 
Minimum Number of Operations to Make Elements in Array Distinct
Solved
Easy
Topics
premium lock icon
Companies
Hint
You are given an integer array nums. You need to ensure that the elements in the array are distinct. To achieve this, you can perform the following operation any number of times:

Remove 3 elements from the beginning of the array. If the array has fewer than 3 elements, remove all remaining elements.
Note that an empty array is considered to have distinct elements. Return the minimum number of operations needed to make the elements in the array distinct.

 

Example 1:

Input: nums = [1,2,3,4,2,3,3,5,7]

Output: 2

Explanation:

In the first operation, the first 3 elements are removed, resulting in the array [4, 2, 3, 3, 5, 7].
In the second operation, the next 3 elements are removed, resulting in the array [3, 5, 7], which has distinct elements.
Therefore, the answer is 2.

Example 2:

Input: nums = [4,5,6,4,4]

Output: 2

Explanation:

In the first operation, the first 3 elements are removed, resulting in the array [4, 4].
In the second operation, all remaining elements are removed, resulting in an empty array.
Therefore, the answer is 2.

Example 3:

Input: nums = [6,7,8,9]

Output: 0

Explanation:

The array already contains distinct elements. Therefore, the answer is 0.


code :

class Solution {
public:
   int minimumOperations(vector<int>& nums) {
    vector<int> freq(101, 0);
    for(int i = nums.size()-1; i >= 0; --i){
        if(++freq[nums[i]] > 1) return ceil((double)(i + 1)/3);
    }
    return 0;
    }
};


